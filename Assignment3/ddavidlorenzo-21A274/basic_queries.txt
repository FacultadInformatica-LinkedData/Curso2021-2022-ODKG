# 1. Get all the classes
########################
select distinct ?Class where {?Class a rdfs:Class}


# 2. Get the subclasses of the class Establishment
################################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?Subclass
WHERE 
{
	?Subclass rdfs:subClassOf vocab:Establishment
}


# 3. Get the instances of the class City
########################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?instance
WHERE
{
	?instance a vocab:City
}


# 4. Get the number of inhabitants of Santiago de Compostela
##############################################################

#4.1. Discover the name of the properties for each city (alternatively, we could just show those for Santiago de Compostela)
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?city ?props
WHERE
{
	?city a vocab:City .
	?city ?props ?x
}

#4.2. he property we are looking for is called hasInhabitantNumber. Let's now proceed with the query.

#4.2.1. Using the URI for Santiago de Compostela.

PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?inhabitants
WHERE
{
	vocab:Santiago_de_Compostela vocab:hasInhabitantNumber ?inhabitants
}



#4.2.2. Using the "label" property, which shall contain the name of the city written in Natural Languge.

PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?inhabitants
WHERE
{
	?city a vocab:City .
	
	# Filter by label.
	?city rdfs:label "Santiago_de_Compostela" . 
	
	?city vocab:hasInhabitantNumber ?inhabitants
}


# 5. Get the number of inhabitants of Santiago de Compostela and of Arzua
########################################################################

PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?locality ?inhabitants
WHERE 
{
	# ?locality a vocab:Locality . # Not needed actually.
	?locality vocab:hasInhabitantNumber ?inhabitants
}


# 6. Get different places with the inhabitants number, ordering the results by
name of the place (ascending)
##############################################################################

PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?locality ?inhabitants
WHERE 
{
	?locality vocab:hasInhabitantNumber ?inhabitants
} ORDER BY ASC(?locality)


# 7. Get all the instances of Locality with their inhabitant number (if it exists)
######################################################################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?locality ?inhabitants
WHERE 
{
	# Using property paths (https://www.w3.org/TR/sparql11-query/#pp-language)
	?locality a/rdfs:subClassOf* vocab:Locality .
	
	OPTIONAL {
		?locality vocab:hasInhabitantNumber ?inhabitants .
	}

}

# Alternatively... 

PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?locality ?inhabitants
WHERE 
{
	?tloc rdfs:subClassOf* vocab:Locality .
	?locality a ?tloc .
	OPTIONAL {
		?locality vocab:hasInhabitantNumber ?inhabitants .
	}
}


# 8. Get all the places with more than 200.000 inhabitants
###########################################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?place ?inhabitants
WHERE 
{
	?place vocab:hasInhabitantNumber ?inhabitants .
	FILTER(xsd:integer(?inhabitants) > 200000) .

}


# 9. Get postal data of Pazo_Breogan (street, number, locality, province)
##########################################################################


# 10. Get the subclasses of class Location
#########################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?locationSubClass
WHERE 
{
	?locationSubClass rdfs:subClassOf+ vocab:Location . 
}


# 11. Get the instances of class Locality
##########################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
SELECT DISTINCT ?locality
WHERE 
{
	# Including instances the class of which inherits from Locality
	?locality a/rdfs:subClassOf* vocab:Locality . 

}


# 12. Describe the resource with rdfs:label "Madrid"
####################################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
DESCRIBE ?res 
WHERE 
{
	?res rdfs:label "Madrid"
}


# 13. Construct the RDF(S) graph that directly relates all the touristic places
with their respective provinces, using a new property called ”isIn”
###############################################################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
CONSTRUCT {
	?tplace vocab:isIn ?province
} WHERE {
	?tplace a/rdfs:subClassOf* vocab:TouristicLocation .
	OPTIONAL {
		?tplace vocab:isPlacedIn/vocab:inProvince ?province .
	}
}


# 14. Ask if there is some instance of Town
############################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
ASK {
	?town a vocab:Town
}


# 15. Ask if there is some instance of Chapel
############################################
PREFIX vocab: <http://GP-onto.fi.upm.es/exercise2#>
ASK {
	?chapel a vocab:Chapel
}