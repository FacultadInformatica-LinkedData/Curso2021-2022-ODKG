# -*- coding: utf-8 -*-
"""odkb_task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SwhEbJSJT3ZDxcZ4D4J-UtOCPp6g2pNu
"""

# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

""" **TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL** """

""" SPARQL """
query = prepareQuery('''
  SELECT 
    ?s
  WHERE { 
    ?s (rdfs:subClassOf/rdfs:subClassOf*) ns:Person. 
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": ns}
)

for result in g.query(query):
  print(result)

""" RDFLib """
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(s)
    for s1,p1,o1 in g.triples((None, RDFS.subClassOf, s)):
      print(s1)

""" **TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)** """

""" SPARQL """
query = prepareQuery('''
  SELECT distinct ?Person
  WHERE {
    {?PClass (rdfs:subClassOf/rdfs:subClassOf*) ns:Person}
    {?Person rdf:type ?PClass}
    UNION
    {?Person rdf:type ns:Person}
  }
  ''',
  initNs = {"ns": ns}
)

for result in g.query(query):
  print(result)

""" RDFLib """
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
    for s1,p1,o1 in g.triples((None, RDF.type, s)):
        print(s1)
        
for s2,p2,o2 in g.triples((None, RDF.type, ns.Person)):
    print(s2)

""" **TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL** """

query = prepareQuery('''
  SELECT distinct ?Person ?P ?O
  WHERE {
    {?PClass (rdfs:subClassOf/rdfs:subClassOf*) ns:Person}
    {?Person rdf:type ?PClass}
    UNION
    {?Person rdf:type ns:Person}
    {?Person ?P ?O}
  }
  ''',
  initNs = { "ns": ns}
)

for result in g.query(query):
  print(result)

""" RDFLib """
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  for s1,p1,o1 in g.triples((s, None, None)):
    print(s1,p1,o1)
    
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1,p,o in g.triples((None, RDF.type, s)):
    for s2,p2,o2 in g.triples((s1, None, None)):
      print(s2,p2,o2)