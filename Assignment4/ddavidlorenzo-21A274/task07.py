# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Ivo8TmIIdH25JAqTuoOPIjBPElUbRua

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib.plugins.sparql import prepareQuery
from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

# Namespace declaration.
ns = Namespace("http://somewhere#")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# RDFLib
print('RDFLib: List all subclasses of "Person".')
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)

# SPARQL
print('\nSPARQL: List all subclasses of "Person".')

q1 = prepareQuery('''
  SELECT ?Subclass WHERE { 
    ?Subclass rdfs:subClassOf ns:Person
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS }
)

# Visualize the results
for r in g.query(q1):
 print(r.Subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

Property paths **cannot** be indicated in the function "``triples``" of ``rdflib.Graph``. Hence, we are missing some instances of class *Person* that may be at a deeper lever in the hierachy, e.g., *PhD Student* which is, in fact, a subclass of *Person*. For the sake of consistency of the results, I will neither be using property paths in SPARQL.
"""

# RDFLib
print('RDFLib: List all individuals of "Person".')

for s,_,_ in g.triples((None, RDF.type, ns.Person)):
  print(s)

for s,_,_ in g.triples((None, RDFS.subClassOf, ns.Person)):
    for s1,_,_ in g.triples((None, RDF.type, s)):
        print(s1)

# SPARQL
print('\nSPARQL: List all individuals of "Person".')

q2 = prepareQuery('''
  SELECT ?Person WHERE { 
    ?Person a|(a/rdfs:subClassOf) ns:Person
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS }
)

# with property paths...
# q2 = prepareQuery('''
#   SELECT ?Person WHERE { 
#     ?Person a/rdfs:subClassOf* ns:Person
#   }
#   ''',
#   initNs = { "ns": ns, "rdfs": RDFS }
# )

# Visualize the results
for r in g.query(q2):
 print(r.Person)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

The same problem described in the previous exercise applies to this task. I will proceed in the very same manner.
"""

# RDFLib
print('RDFLib: List all individuals of "Person" and all their properties including their class.')

for s,_,_ in g.triples((None, RDF.type, ns.Person)):
  for s1,p1,o1 in g.triples((s, None, None)):
    print(s1,p1,o1)

for s,_,_ in g.triples((None, RDFS.subClassOf, ns.Person)):
    for s1,_,_ in g.triples((None, RDF.type, s)):
        for s2, p2, o2 in g.triples((s1, None, None)):
          print(s2, p2, o2)

# SPARQL
print('\nSPARQL: List all individuals of "Person" and all their properties including their class.')

q3 = prepareQuery('''
  SELECT ?Person ?Prop ?Value WHERE { 
    ?Person a|(a/rdfs:subClassOf) ns:Person .
    ?Person ?Prop ?Value
  }
  ''', 
  initNs = { "ns": ns, "rdfs": RDFS }
)

# Visualize the results
for r in g.query(q3):
 print(r.Person, r.Prop, r.Value)