# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ecFkd3scVv7AQVNwqJ2gGqphv7T869jS

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# --- Visualization of all subclasses of 'Person' ---
# Import packages
from rdflib.plugins.sparql import prepareQuery
# Definition of namespace
ns = Namespace("http://somewhere#")
# Visualization of data (RDFLIB)
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s,p,o)
# Preparation of Query
Q1 = prepareQuery('''
  SELECT ?Subs WHERE { 
    ?Subs rdfs:subClassOf ns:Person
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)

# Visualization of result (SPARQL)
for r in g.query(Q1):
  print(r.Subs)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# --- Visualization of all 'Person' ---
# Import packages
from rdflib.plugins.sparql import prepareQuery
# Definition of namespace
ns = Namespace("http://somewhere#")
# Visualization of data (RDFLIB)
tripPer = list(g.triples((None, RDF.type, ns.Person)))
tripSubPer = list(g.triples((None, RDF.type/RDFS.subClassOf, ns.Person)))
for s, p, o in (tripPer + tripSubPer):
  print(s,p,o)
# Preparation of Query
Q1 = prepareQuery('''
  SELECT ?People WHERE { 
    ?People rdf:type | rdf:type/rdfs:subClassOf ns:Person
  }
  ''',
  initNs = { "ns": ns, "rdf": RDF, "rdfs": RDFS}
)

# Visualization of result (SPARQL)
for r in g.query(Q1):
  print(r.People)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# --- Visualization of all 'Person' and properties ---
# Import packages
from rdflib.plugins.sparql import prepareQuery
# Definition of namespace
ns = Namespace("http://somewhere#")
# Visualization of data (RDFLIB)
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  perProps = list(g.triples((s, None, None)))

for s, p, o in g.triples((None, RDF.type/RDFS.subClassOf, ns.Person)):
  subPerProps = list(g.triples((s, None, None)))

for s, p, o in (perProps + subPerProps):
  print(s,p)
# Preparation of Query
Q1 = prepareQuery('''
  SELECT ?People ?Prop WHERE { 
    ?People rdf:type | rdf:type/rdfs:subClassOf ns:Person .
    ?People ?Prop ?Val
  }
  ''',
  initNs = { "ns": ns, "rdf": RDF, "rdfs": RDFS}
)

# Visualization of result (SPARQL)
for r in g.query(Q1):
  print(r.People, r.Prop)