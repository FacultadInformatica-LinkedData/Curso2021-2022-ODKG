
# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

#**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**
print("Sub class of person, rdflib")

for s,p,o in g.triples((None,RDFS.subClassOf,ns.Person)):
  print(s)

q1 = prepareQuery('''
  SELECT 
    ?s
  WHERE { 
    ?s RDFS:subClassOf ns:Person 
  }
  ''',
  initNs = { "RDFS": RDFS,"ns":"http://somewhere#"}
)
print("Sub class of person, sparql")

for r in g.query(q1):
  print(r.s)

#**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

print("Persons, rdflib")

for s in g.subjects(RDF.type,ns.Person):
  print (s)
for subclass in g.subjects(RDFS.subClassOf,ns.Person):
  for s1 in g.subjects(RDF.type,subclass):
    print (s1)

print("Persons, sparql")

q2 = prepareQuery('''
  SELECT 
    ?s ?s
  WHERE {{
    ?s a ns:Person.
    }
    UNION
    {
    ?sub RDFS:subClassOf ns:Person.
    ?s a ?sub
    }
  }
  ''',
  initNs = { "RDFS": RDFS,"ns":"http://somewhere#"}
)

for r in g.query(q2):
  print(r.s)

#**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

print("Persons + properties, rdflib")

for persons in g.subjects(RDF.type,ns.Person):
  for s,p,o in g.triples((persons,None,None)):
    print (s,p,o)
for subclass in g.subjects(RDFS.subClassOf,ns.Person):
  for persons in g.subjects(RDF.type,subclass):
    for s,p,o in g.triples((persons,None,None)):
     print (s,p,o)

print("Persons + properties, sparql")

q3 = prepareQuery('''
  SELECT 
    ?s ?p ?o 
  WHERE {
    {
    ?s a ns:Person.
    ?s ?p ?o
    }
    UNION
    {
    ?sub RDFS:subClassOf ns:Person.
    ?s a ?sub.
    ?s ?p ?o
    }
  }
  ''',
  initNs = { "RDFS": RDFS,"ns":"http://somewhere#"}
)

for r in g.query(q3):
  print(r.s,r.p,r.o)



#print("\n\nGrafo\n",g.serialize(format="ttl"))