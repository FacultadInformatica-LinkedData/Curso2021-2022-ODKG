# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pRd6nYyJ44ItfSKEx8Vf8qNE10TEW9fJ

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

print(g.serialize(format="ttl")) #To visually analyze the file

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")

#By using RDFlib
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print("Results using RDFlib:",s)
  
#By using SPARQL
from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery('''
  SELECT ?subclass 
  WHERE { 
    ?subclass rdfs:subClassOf  ns:Person. 
  } 
  ''', 
  initNs = { "rdfs": RDFS, "ns": ns}
)
for r in g.query(q1):
  print("Results using SPARQL:",r)
# Visualize the results

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

#By using RDFlib
ns = Namespace("http://somewhere#")
print("Results obtained using RDFlib:")
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)): #in order to include those people who are in the subClasses of person (only Researcher in this example)
  for sSC,pSC,oSC in g.triples((None, RDF.type, s)):
    print(sSC)
    
#By using SPARQL
print("Results obtained using SPARQL:")
q2 = prepareQuery('''
  SELECT ?scp
  WHERE { 
    { 
      ?scp rdf:type ns:Person. 
    } 
    UNION 
    {
      ?scr rdfs:subClassOf ns:Person.
      ?scp rdf:type ?scr
    }}
  ''',
  initNs = { "rdfs": RDFS,"rdf": RDF, "ns": ns}
)

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO

#By using RDFlib
print("Results obtained using RDFlib:")
for s,p,o in g.triples((None, RDF.type, ns.Person)): #Individuals of Person (P)
  for sP,pP,oP in g.triples((s, None, None)):
    print(sP,pP,oP)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)): #Individuals of one of the subclasses of Person (SC)
  for sSC,pSC,oSC in g.triples((None, RDF.type, s)):
    for sSCP,pSCP,oSCP in g.triples((sSC, None, None)):
      print(sSCP,pSCP,oSCP)

#By using SPARQL
print("Results obtained using SPARQL:")
q3 = prepareQuery('''
  SELECT 
    ?s ?o ?p
  WHERE { 
    { 
      ?s rdf:type ns:Person.
      ?s ?o ?p 
    } 
    UNION 
    {
      ?s rdf:type ?sc.
      ?s ?o ?p.
      ?sc rdfs:subClassOf ns:Person.      
    }
  }
  ''',
  initNs = { "rdfs": RDFS,"rdf": RDF, "ns": ns}
)

for r in g.query(q3):
  print(r)