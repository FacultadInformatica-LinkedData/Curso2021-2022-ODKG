# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

#RDFLib
for s,p,o in g.triples((None, RDFS.subClassOf, NS.Person)):
  print(s)

#SPARQL
query_1 = prepareQuery('''
  SELECT ?Subs WHERE { 
    ?Subs rdfs:subClassOf ns:Person
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)

# See results
for r in g.query(query_1):
  print(r)



"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""
#RDFLib
ns = Namespace("http://somewhere#")

for s, p, o in g.triples((None,RDF.type,ns.Person)):
  print (s)
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1,p1,o1 in g.triples((None, RDF.type, s)):
    print(s1)


#SPARQL

query_2 = prepareQuery('''
  SELECT ?People WHERE { 
    ?People rdf:type | rdf:type/rdfs:subClassOf ns:Person
  }
  ''',
  initNs = { "ns": ns, "rdf": RDF, "rdfs": RDFS}
)

# See results
for r in g.query(query_2):
  print(r)



"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**"""

#RDFLib
ns = Namespace("http://somewhere#")

for s, p, o in g.triples((None, RDF.type, ns.Person)):
  for s1, p1, o1 in g.triples((s, None, None)):
    print(s1, p1, o1)

for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1, p1, o1 in g.triples((None, RDFS.subClassOf, s)):
    for s2, p2, o2 in g.triples((s1, None, None)):
      print(s2, p2, o2)

#SPARQL

query_3 = prepareQuery('''
  SELECT ?People ?Prop WHERE { 
    ?People rdf:type | rdf:type/rdfs:subClassOf ns:Person .
    ?People ?Prop ?Val
  }
  ''',
  initNs = { "ns": ns, "rdf": RDF, "rdfs": RDFS}
)

for r in g.query(query_3):
            print(r)






