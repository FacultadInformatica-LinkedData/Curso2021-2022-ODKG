# -*- coding: utf-8 -*-
"""Copie de Assignment-Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UySgz--M_FBCYggQx4KzvQfgvPX-A-EL
"""

!echo "deb http://downloads.skewed.de/apt bionic main" >> /etc/apt/sources.list
!apt-key adv --keyserver keys.openpgp.org --recv-key 612DEFB798507F25
!apt-get update
!apt-get install python3-graph-tool python3-cairo python3-matplotlib
!apt-get install libcairo2-dev

"""## Preamble: set up the environment and files used in the assignment (remember to restart runtime)"""

import io
import os
import subprocess
import sys

import math
import numpy as np
import pandas as pd
from graph_tool.all import *
from IPython.display import display, HTML

from kgtk.configure_kgtk_notebooks import ConfigureKGTK
from kgtk.functions import kgtk, kypher

# Parameters

# Folder on local machine where to create the output and temporary folders
input_path = None
output_path = "/tmp/projects"
project_name = "assignment"

"""The following command will download all the files you  need for the assignment:"""

files = [
    "all",
    "label",
    "alias",
    "description",
    "external_id",
    "monolingualtext",
    "quantity",
    "string",
    "time",
    "item",
    "wikibase_property",
    "qualifiers",
    "datatypes",
    "p279",
    "p279star",
    "p31",
    "in_degree",
    "out_degree",
    "pagerank_directed",
    "pagerank_undirected"
]
ck = ConfigureKGTK(files)
ck.configure_kgtk(input_graph_path=input_path,
                  output_path=output_path,
                  project_name=project_name)

"""The KGTK setup command defines environment variables for all the files so that you can reuse the Jupyter notebook when you install it on your local machine."""

ck.print_env_variables()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# ck.load_files_into_cache()

"""# About this assignment.
This assignment is based on https://github.com/usc-isi-i2/kgtk-notebooks/tree/main/tutorial. If you have any questions or doubts, it is encouraged to look how the tutorial performs the different operations.

Additional information can be found in https://kgtk.readthedocs.io/

## Simple graph statistics

Let's calculate first some statistics about the KG. Count the number of instances:
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# kgtk("""
#     query -i all \
#       --match '(instance)-[:P31]->(class)'
#       --return 'count(distinct instance) as count_instances'
# """)

"""Now, count the number of distinct properties: 

"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# kgtk("""
#     query -i all \
#       --match '(instance)-[l {label: property}]->(class)'
#       --return 'count(distinct property) as count_property'
# """)

"""Now, let's count the frequency of those properties. That is, how many instances we can find with each property"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# kgtk("""
#     query -i all \
#       --match '(instance)-[l {label: property}]->(class)'
#       --return 'l.label as property, count(distinct instance) as frequency'
# """)

"""## Simple queries
Some of these queries are simple and will run in the Wikidata endpoint. 
Try both of them using SPARQL and Kypher
"""

# Which actors has Schwarzenegger worked with throughout his career? (Print also the movie)

# (in SPARQL)
SELECT ?actor ?movie ?movieLabel ?actorLabel WHERE {
   ?movie wdt:P161 wd:Q2685 .
   ?movie wdt:P161 ?actor .
   SERVICE wikibase:label { 
     bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en" . 
   }
   FILTER (?actor != wd:Q2685)
}

# In Kypher:
kgtk("""
    query -i all \
      --match '(:Q2685)<-[:P161]-(movie)-[:P161]->(actor)'
      --where 'actor != "Q2685"'
      --return 'distinct actor as actor, movie as movie'
    
    / add-labels
""")

# How many awards does Schwarzenegger have?

# SPARQL:
SELECT (COUNT(DISTINCT ?awards) as ?num_awards) WHERE {
  wd:Q2685 wdt:P166 ?awards .
}

# Kypher:
kgtk("""
    query -i all
      --match '(:Q2685)-[:P166]->(awards)' 
      --return 'count(distinct awards) as num_awards' 
""")

# Retrieve at least two members of Schwarzenegger's political party. Make sure only persons are returned
# SPARQL:
SELECT ?partyMember ?party ?partyMemberLabel ?partyLabel WHERE {
   wd:Q2685 wdt:P102 ?party .
   ?partyMember  wdt:P102 ?party .
   ?partyMember  wdt:P31 wd:Q5 .
   SERVICE wikibase:label { 
     bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en" .
   }
   FILTER (?partyMember != wd:Q2685)
}
LIMIT 500

# Kypher:
kgtk("""
    query -i all
      --match '(:Q2685)-[:P102]->(party)<-[:P102]-(partyMember)-[:P31]->(:Q5)'
      --where 'partyMember != "Q2685"'
      --return 'distinct partyMember as partyMember, party as party'
    / add-labels
""")

# What are the properties that describe an artist?

# In theory this one is heavy on Wikidata

# SPARQL: 
SELECT DISTINCT ?property ?propertyLabel WHERE {
   ?class rdfs:subClassOf* wd:Q483501 .
   ?artist wdt:P106 ?class .
   ?artist ?property ?p .
   SERVICE wikibase:label { 
     bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en" .
   }
}
LIMIT 500


# In Kypher:
kgtk("""
    query -i all
      --match '()<-[l {label: property}]-(artist)-[:P106]->(class)-[:P279star]->(:Q483501)'
      --return 'distinct property as property'
    / add-labels
""")

# And a film director?
# SPARQL: 
SELECT DISTINCT ?prop WHERE {
  ?director wdt:P106 wd:Q2526255 .
  ?director ?prop ?values .
}
LIMIT 10

# In Kypher:
kgtk("""
    query -i all
    --match '(:Q2526255)<-[:P106]-(director)-[p]->()' \
    --return 'distinct p.label as property'
    / add-labels
""")

# Embeddings. Run the noebook https://colab.research.google.com/drive/1A55l10voA4jnjoju3fojJWY3buLfaR4i?usp=sharing. 
# Which are the top 10 similar entities to Schwarzenegger? (list below) 
0	Q2685	1.0	similarity	'Arnold Schwarzenegger'@en	'Austrian-American actor, businessman, bodybui...
1	Q48337	0.8691084384918213	similarity	'Morgan Freeman'@en	'American actor, film director, and narrator'@en
2	Q2263	0.867979884147644	similarity	'Tom Hanks'@en	'American actor and producer'@en
3	Q64683518	0.8556764721870422	similarity	'James J. Hanks'@en	'American actor'@en
4	Q20993894	0.8537364602088928	similarity	'Elizabeth Hanks'@en	'daughter of Tom Hanks'@en
5	Q111240	0.8493958711624146	similarity	'Jim Lovell'@en	'American astronaut'@en
6	Q20993895	0.8488441109657288	similarity	'Chet Hanks'@en	'American film actor'@en
7	Q43203	0.8458874225616455	similarity	'Clint Eastwood'@en	'American actor, filmmaker, musician, and poli...
8	Q108510	0.8441289663314819	similarity	'James Garner'@en	'American film and television actor (1928-2014...
9	Q92759	0.8376296758651733	similarity	'Larry Ellison'@en	'American internet entrepreneur and businessma...
10	Q352203	0.8348175287246704	similarity	'Bob Gunton'@en	'American film and television actor'@en

"""## Network analysis
Print all the paths between Schwarzenegger and Trump

## Note that **you have to create a file `paths.tsv` with the node pairs you want to find the paths for. Upload it in the "content" folder**

"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cat <<EOF >$TEMP/path-query.tsv
# node1	node2	label
# Q2685	Q22686	path

kgtk("""
    add-labels -i $TEMP/path-query.tsv
""")

# Calculate all the paths between Trump and Schwarzenegger (max hops: 3)
# TO DO    
kgtk("""
    paths -i all
      --path-file $TEMP/path-query.tsv
      --statistics-only True
      --max_hops 3
""")

# Retrieve all the family of Schwarzenegger (child/father/mother/sibling/spouse relationships)
# TO DO  
kgtk("""
    reachable-nodes -i all
      --root Q2685
      --props P40 P3373 P26 P22 P25
    / add-labels
""")

# What are the 10 most relevant actors (pagerank) in the graph? (Use graph-statistics command to calculate page rank, and then filter only actors)
# TO DO  
kgtk("""
    graph-statistics -i all -o /tmp/projects/assignment/metadata.pagerank.undirected.tsv.gz
      --compute-pagerank True
      --compute-hits False
      --page-rank-property P_pagerank
      --output-pagerank True
      --output-statistics-only
      --output-hits False 
      --undirected True
      --log-file /tmp/projects/assignment/metadata.pagerank.undirected.summary.txt
""")

# TO DO: Hint: do the query after calculating the pagerank. See https://github.com/usc-isi-i2/kgtk-notebooks/blob/main/tutorial/06-kg-network-analysis.ipynb for inspiration
kgtk("""
    query -i item -i $OUT/metadata.pagerank.undirected.tsv.gz
      --match 'actor: (actor)-[:P106]->(:Q33999),rank: (actor)-[:Pdirected_pagerank]->(pagerank)'
      --return 'actor as node1, rank as node2'
      --order-by 'cast(rank, float) desc'
      --limit 10
     / add-labels
""")