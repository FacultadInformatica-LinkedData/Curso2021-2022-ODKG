# -*- coding: utf-8 -*-
"""Copia de Assignment-Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11G6v0133QoBMAITGTsNK8_e3Fjufz-ws
"""

!pip install kgtk==1.0.1

!echo "deb http://downloads.skewed.de/apt bionic main" >> /etc/apt/sources.list
!apt-key adv --keyserver keys.openpgp.org --recv-key 612DEFB798507F25
!apt-get update
!apt-get install python3-graph-tool python3-cairo python3-matplotlib
!apt-get install libcairo2-dev

"""## Preamble: set up the environment and files used in the assignment (remember to restart runtime)"""

import io
import os
import subprocess
import sys

import math
import numpy as np
import pandas as pd
from graph_tool.all import *
from IPython.display import display, HTML

from kgtk.configure_kgtk_notebooks import ConfigureKGTK
from kgtk.functions import kgtk, kypher

# Parameters

# Folder on local machine where to create the output and temporary folders
input_path = None
output_path = "/tmp/projects"
project_name = "assignment"

"""The following command will download all the files you  need for the assignment:"""

files = [
    "all",
    "label",
    "alias",
    "description",
    "external_id",
    "monolingualtext",
    "quantity",
    "string",
    "time",
    "item",
    "wikibase_property",
    "qualifiers",
    "datatypes",
    "p279",
    "p279star",
    "p31",
    "in_degree",
    "out_degree",
    "pagerank_directed",
    "pagerank_undirected"
]
ck = ConfigureKGTK(files)
ck.configure_kgtk(input_graph_path=input_path,
                  output_path=output_path,
                  project_name=project_name)

"""The KGTK setup command defines environment variables for all the files so that you can reuse the Jupyter notebook when you install it on your local machine."""

ck.print_env_variables()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# ck.load_files_into_cache()

"""# About this assignment.
This assignment is based on https://github.com/usc-isi-i2/kgtk-notebooks/tree/main/tutorial. If you have any questions or doubts, it is encouraged to look how the tutorial performs the different operations.

Additional information can be found in https://kgtk.readthedocs.io/

## Simple graph statistics

Let's calculate first some statistics about the KG. Count the number of instances:
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# kgtk("""
#     query -i all
#         --match '(instance)-[:P31]->(class)'
#         --return 'count(distinct instance) as number_instances'
# """)

"""Now, count the number of distinct properties: 

"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# kgtk("""
#     query -i all
#         --match '()-[p {label: prop}]->()'
#         --return 'count(distinct prop) as number_properties'
# """)

"""Now, let's count the frequency of those properties. That is, how many instances we can find with each property"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# kgtk("""
#     query -i all
#         --match '()<-[prop]-(i)-[:P31]->()'
#         --return 'prop.label, count(distinct i) as number_instances'
#         --order-by 'cast(number_instances, int) desc'
# """)

"""## Simple queries
Some of these queries are simple and will run in the Wikidata endpoint. 
Try both of them using SPARQL and Kypher
"""

# Which actors has Schwarzenegger worked with throughout his career? (Print also the movie)

# (in SPARQL)
'''
SELECT ?movie ?actor ?movieLabel ?actorLabel 
WHERE {
  ?movie wdt:P161 wd:Q2685.
  ?movie wdt:P161 ?actor  
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "en" .
   }
FILTER(?actor != wd:Q2685)
}
''' 
#This is the query in wiki https://w.wiki/4QJh
# In Kypher:
kgtk("""
    query -i all
        --match '(actor)<-[:P161]-(movie)-[:P161]->(:Q2685)'
        --return 'movie as movie, actor as actor'
        --where 'actor != "Q2685"'
    / add-labels
""")

# How many awards does Schwarzenegger have?

# SPARQL:
# TO DO
'''
SELECT ( COUNT(DISTINCT ?award ) as ?nawards)  
WHERE {
  wd:Q2685 wdt:P166 ?award
}
'''
#wiki result https://w.wiki/4QJk

# Kypher:
kgtk("""
    query -i all 
    --match '(:Q2685)-[:P166]->(awards)' 
    --return 'count(distinct awards) as nawards'
""")

# Retrieve at least two members of Schwarzenegger's political party. Make sure only persons are returned
# SPARQL:
'''
SELECT ?member ?memberLabel  
WHERE {
  wd:Q2685 wdt:P102 ?politic.
  ?member wdt:P102 ?politic.
  ?member wdt:P31 wd:Q5
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "en" .
   }
 FILTER(?member != wd:Q2685)
}
'''
#Result here: https://w.wiki/4QJn

# Kypher:
kgtk("""
    query -i all
        --match '(:Q2685)-[:P102]->(politic)<-[:P102]-(member)-[:P31]->(:Q5)'
        --where 'member != "Q2685"'
        --return 'member as member' 
    / add-labels
""")

# What are the properties that describe an artist?

# In theory this one is heavy on Wikidata

# SPARQL: 
'''
SELECT DISTINCT ?property  
WHERE {
  ?artist wdt:P106/rdfs:subClassOf* wd:Q483501. 
  ?artist ?property ?o        
}
LIMIT 100
'''
#result here: https://w.wiki/4QJr

# In Kypher:
kgtk("""
    query -i all
        --match '()<-[property]-(subject)-[:P106]->(artist)-[:P279star]->(:Q483501)'
        --return 'distinct property.label as property'
    / add-labels
""")

# And a film director?
# SPARQL: 
'''
SELECT DISTINCT ?property  
WHERE {
  ?director wdt:P106/rdfs:subClassOf* wd:Q2526255. 
  ?director ?property ?o        
}
LIMIT 100
'''
#result here: https://w.wiki/4QJu

# In Kypher:
kgtk("""
    query -i all
        --match '()<-[property]-(instance)-[:P106]->(film_director)-[:P279star]->(:Q2526255)'
        --return 'distinct property.label as property'
    / add-labels
""")

# Embeddings. Run the noebook https://colab.research.google.com/drive/1A55l10voA4jnjoju3fojJWY3buLfaR4i?usp=sharing. 
# Which are the top 10 similar entities to Schwarzenegger? (list below) 
# TO DO
print('''
node1	node2	label	node1;label	node1;description
0	Q2685	1.0	similarity	'Arnold Schwarzenegger'@en	'Austrian-American actor, businessman, bodybui...
1	Q727086	0.8432333469390869	similarity	'Hugh O\'Brian'@en	'American actor and United States Marine'@en
2	Q471003	0.8378421664237976	similarity	'John Larroquette'@en	'born 1947; American film, television and stag...
3	Q287793	0.8299766182899475	similarity	'Carl Reiner'@en	'American actor, film director, producer, writ...
4	Q446481	0.8250349760055542	similarity	'Harvey Fierstein'@en	'American actor'@en
5	Q349852	0.8169184923171997	similarity	'Tom Sizemore'@en	'American actor'@en
6	Q316647	0.816237211227417	similarity	'Randy Quaid'@en	'American actor'@en
7	Q73089	0.8145493268966675	similarity	'Gene Kelly'@en	'American dancer, actor, singer, director, pro...
8	Q16349	0.8144147992134094	similarity	'DeForest Kelley'@en	'American actor (1920-1999)'@en
9	Q355153	0.8135289549827576	similarity	'Robert Stack'@en	'American actor (1919-2003)'@en
''')

"""## Network analysis
Print all the paths between Schwarzenegger and Trump

## Note that **you have to create a file `paths.tsv` with the node pairs you want to find the paths for. Upload it in the "content" folder**

"""

#%%bash
#cat <<EOF >$TEMP/path-query.tsv
#node1	node2	label
#Q2685	Q22686	path

with open(os.environ['TEMP'] + '/path-query.tsv', 'w') as fp:
    fp.write("node1\tnode2\tlabel\n")
    fp.write("Q2685\tQ22686\tpath\n")
fp.close()

kgtk("""
    add-labels -i $TEMP/path-query.tsv
""")

# Calculate all the paths between Trump and Schwarzenegger (max hops: 3)
# TO DO    
kgtk("""
        paths -i all
          --path-file $TEMP/path-query.tsv
          --statistics-only True
          --max_hops 3
""")

# Retrieve all the family of Schwarzenegger (child/father/mother/sibling/spouse relationships)
# TO DO  
kgtk("""
reachable-nodes -i all
        --root Q2685
        --props P40 P3373 P26 P22 P25
""")

# What are the 10 most relevant actors (pagerank) in the graph? (Use graph-statistics command to calculate page rank, and then filter only actors)
# TO DO  
kgtk("""
graph-statistics -i all -o $OUT/metadata.pagerank.undirected.tsv.gz
    --compute-pagerank True 
    --compute-hits False 
    --page-rank-property Pdirected_pagerank 
    --vertex-in-degree-property Pindegree
    --vertex-out-degree-property Poutdegree
    --output-degrees True 
    --output-pagerank True 
    --output-hits False \
    --output-statistics-only 
    --undirected True
""")

kgtk("""
    head -i $OUT/metadata.pagerank.undirected.tsv.gz
""")

# TO DO: Hint: do the query after calculating the pagerank. See https://github.com/usc-isi-i2/kgtk-notebooks/blob/main/tutorial/06-kg-network-analysis.ipynb for inspiration
kgtk("""
    query -i item -i $OUT/metadata.pagerank.undirected.tsv.gz
        --match '
            item: (actor)-[:P106]->(:Q33999),
            pagerank: (actor)-[:P_pagerank]->(pagerank)'
        --return 'actor as node1, pagerank as node2'
        --order-by 'cast(pagerank, float) desc'
        --limit 10
""")
