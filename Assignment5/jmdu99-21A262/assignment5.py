# -*- coding: utf-8 -*-
"""Assignment-Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F4g148P8CTO1qyCjHqL0bmUXH-Bu5sC2
"""

# !pip install kgtk==1.0.1

'''
!echo "deb http://downloads.skewed.de/apt bionic main" >> /etc/apt/sources.list
!apt-key adv --keyserver keys.openpgp.org --recv-key 612DEFB798507F25
!apt-get update
!apt-get install python3-graph-tool python3-cairo python3-matplotlib
!apt-get install libcairo2-dev
'''

"""## Preamble: set up the environment and files used in the assignment (remember to restart runtime)"""

import io
import os
import subprocess
import sys

import math
import numpy as np
import pandas as pd
from graph_tool.all import *
from IPython.display import display, HTML

from kgtk.configure_kgtk_notebooks import ConfigureKGTK
from kgtk.functions import kgtk, kypher

# Parameters

# Folder on local machine where to create the output and temporary folders
input_path = None
output_path = "/tmp/projects"
project_name = "assignment"

"""The following command will download all the files you  need for the assignment:"""

files = [
    "all",
    "label",
    "alias",
    "description",
    "external_id",
    "monolingualtext",
    "quantity",
    "string",
    "time",
    "item",
    "wikibase_property",
    "qualifiers",
    "datatypes",
    "p279",
    "p279star",
    "p31",
    "in_degree",
    "out_degree",
    "pagerank_directed",
    "pagerank_undirected"
]
ck = ConfigureKGTK(files)
ck.configure_kgtk(input_graph_path=input_path,
                  output_path=output_path,
                  project_name=project_name)

"""The KGTK setup command defines environment variables for all the files so that you can reuse the Jupyter notebook when you install it on your local machine."""

ck.print_env_variables()

ck.load_files_into_cache()

"""# About this assignment.
This assignment is based on https://github.com/usc-isi-i2/kgtk-notebooks/tree/main/tutorial. If you have any questions or doubts, it is encouraged to look how the tutorial performs the different operations.

Additional information can be found in https://kgtk.readthedocs.io/

## Simple graph statistics

Let's calculate first some statistics about the KG. Count the number of instances:
"""

kgtk("""
    query -i all
        --match '(instance)-[:P31]->(class)'
        --return 'count(distinct instance) as n_instances'
""")

"""Now, count the number of distinct properties: 

"""

kgtk("""
    query -i all
        --match '()-[p {label: property}]->()'
        --return 'count(distinct property) as n_properties'
""")

"""Now, let's count the frequency of those properties. That is, how many instances we can find with each property"""

kgtk("""
    query -i all
        --match '()<-[p]-(i)-[:P31]->()'
        --return 'p.label, count(distinct i) as n_instances'
        --order-by 'cast(n_instances, int) desc' 
""")

"""## Simple queries
Some of these queries are simple and will run in the Wikidata endpoint. 
Try both of them using SPARQL and Kypher
"""

# Which actors has Schwarzenegger worked with throughout his career? (Print also the movie)

# (in SPARQL)
'''
SELECT ?film ?actor ?filmLabel ?actorLabel 
WHERE {
  ?film wdt:P161 wd:Q2685.
  ?film wdt:P161 ?actor  
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "en" .
   }
FILTER(?actor != wd:Q2685)
}
'''
# Query result: https://w.wiki/4Pje

# In Kypher:
kgtk("""
    query -i all
        --match '(actor)<-[:P161]-(film)-[:P161]->(:Q2685)'
        --return 'film as film, actor as actor'
        --where 'actor != "Q2685"'   
    / add-labels
""")

# How many awards does Schwarzenegger have?

# SPARQL:
'''
SELECT (COUNT(DISTINCT ?award) as ?n_awards)  
WHERE {
  wd:Q2685 wdt:P166 ?award.
}
'''
# Query result: https://w.wiki/4Nq9

# Kypher:
kgtk("""
    query -i all
        --match '(:Q2685)-[:P166]->(award)'
        --return 'count(distinct award) as n_awards' 
""")

# Retrieve at least two members of Schwarzenegger's political party. Make sure only persons are returned
# SPARQL:
'''
SELECT ?member ?memberLabel  
WHERE {
  wd:Q2685 wdt:P102 ?party.
  ?member wdt:P102 ?party.
  ?member wdt:P31 wd:Q5
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "en" .
   }
 FILTER(?member != wd:Q2685)
}
'''
# Query result: https://w.wiki/4Pjq

# Kypher:
kgtk("""
    query -i all
        --match '(:Q2685)-[:P102]->(party)<-[:P102]-(member)-[:P31]->(:Q5)'
        --where 'member != "Q2685"'
        --return 'member as member' 
    / add-labels
""")

# What are the properties that describe an artist?

# In theory this one is heavy on Wikidata

# SPARQL: 
'''
SELECT DISTINCT ?property  
WHERE {
  ?artist wdt:P106/wdt:P279* wd:Q483501. 
  ?artist ?property ?x        
}
LIMIT 1000
'''
# Query result: https://w.wiki/4Pkp

# In Kypher:
kgtk("""
    query -i all
        --match '()<-[property]-(instance)-[:P106]->(artist)-[:P279star]->(:Q483501)'
        --return 'distinct property.label as property'
    / add-labels
""")

# And a film director?
# SPARQL: 
'''
SELECT DISTINCT ?property  
WHERE {
  ?director wdt:P106/wdt:P279* wd:Q2526255. 
  ?director ?property ?x        
}
LIMIT 1000
'''
# Query result: https://w.wiki/4Pkr

# In Kypher:
kgtk("""
    query -i all
        --match '()<-[property]-(instance)-[:P106]->(film_director)-[:P279star]->(:Q2526255)'
        --return 'distinct property.label as property'
    / add-labels
""")

# Embeddings. Run the noebook https://colab.research.google.com/drive/1A55l10voA4jnjoju3fojJWY3buLfaR4i?usp=sharing. 
# Which are the top 10 similar entities to Schwarzenegger? (list below)
print('''
node1	node2	label	node1;label	node1;description
0	Q2685	0.9999999403953552	similarity	'Arnold Schwarzenegger'@en	'Austrian-American actor, businessman, bodybui...
1	Q174311	0.8731611967086792	similarity	'Christopher Reeve'@en	'American actor, director, and activist'@en
2	Q40026	0.8642321228981018	similarity	'Sylvester Stallone'@en	'American actor, screenwriter, and film direct...
3	Q343633	0.8628062009811401	similarity	'Burgess Meredith'@en	'American film and television actor'@en
4	Q294927	0.856814980506897	similarity	'Jerry Lewis'@en	'American comedian, actor, film producer, writ...
5	Q10294979	0.8530674576759338	similarity	'Herbert Berghof'@en	'Austrian-American actor'@en
6	Q105817	0.8410972952842712	similarity	'Kevin Kline'@en	'American actor'@en
7	Q110154	0.824417233467102	similarity	'George Takei'@en	'American actor and author'@en
8	Q220918	0.8240801692008972	similarity	'Emilio Estevez'@en	'American actor, director, and writer'@en
9	Q225657	0.8231492638587952	similarity	'Henry Gibson'@en	'American actor (1935-2009)'@en
''')

"""## Network analysis
Print all the paths between Schwarzenegger and Trump

## Note that **you have to create a file `paths.tsv` with the node pairs you want to find the paths for. Upload it in the "content" folder**

"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cat $TEMP/path-query.tsv

with open(os.environ['TEMP'] + '/path-query.tsv', 'w') as fp:
    fp.write("node1\tnode2\tlabel\n")
    fp.write("Q2685\tQ22686\tpath\n")
fp.close()

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cat $TEMP/path-query.tsv

kgtk("""
    add-labels -i $TEMP/path-query.tsv
""")

# Calculate all the paths between Trump and Schwarzenegger (max hops: 3)
kgtk("""
    paths -i all
        --verbose False
        --max_hops 3
        --statistics-only True
        --path-file $TEMP/path-query.tsv
    -o $TEMP/path-results.tsv
""")
# !head $TEMP/path-results.tsv
kgtk("""
    query -i all -i $TEMP/path-results.tsv
        --match '
            path: (path)-[segment]->(edge),
            all: (n1)-[edge {label: property}]->(n2)'
        --return 'n1 as node1, property as label, n2 as node2, path as path, segment as segment'
        --order-by 'path, segment'
    / add-labels
""")

# Retrieve all the family of Schwarzenegger (child/father/mother/sibling/spouse relationships)
kgtk("""
reachable-nodes -i all 
                     --root Q2685
                     --props P40, P22, P25, P3373, P26
                     --label Pextended_family
                     / add-labels
""")

# What are the 10 most relevant actors (pagerank) in the graph? (Use graph-statistics command to calculate page rank, and then filter only actors) 
kgtk("""
    graph-statistics -i all -o $OUT/metadata.pagerank.undirected.tsv.gz
    --compute-pagerank True 
    --compute-hits False 
    --page-rank-property Pdirected_pagerank 
    --vertex-in-degree-property Pindegree
    --vertex-out-degree-property Poutdegree
    --output-degrees True 
    --output-pagerank True 
    --output-hits False \
    --output-statistics-only 
    --undirected True 
""")
kgtk("""
    head -i $OUT/metadata.pagerank.undirected.tsv.gz
""")

# Hint: do the query after calculating the pagerank. See https://github.com/usc-isi-i2/kgtk-notebooks/blob/main/tutorial/06-kg-network-analysis.ipynb for inspiration
kgtk("""
    query -i item -i $OUT/metadata.pagerank.undirected.tsv.gz
        --match '
            item: (actor)<-[:P161]-(film)-[:P31]->(:Q11424),
            pagerank: (actor)-[:Pdirected_pagerank]->(pagerank)'
        --return 'actor as actor, pagerank as relevance'
        --order-by 'cast(pagerank, float) desc'
        --limit 10
    / add-labels
""")